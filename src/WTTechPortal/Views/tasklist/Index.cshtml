@model IEnumerable<WTTechPortal.Models.tasklist>

    @{
        ViewData["Title"] = "Task List";
        Layout = "_Layout-Wide";
    }

@{
    SelectList statuslist = ViewBag.statuslist;
    SelectList priorities = ViewBag.priorities;
    SelectList ownerlist = ViewBag.ownerlist;
    string emailstatus = ViewBag.EmailStatus;
}

    <h2>Task List</h2>
    <div class="emailupdate">@Html.Display("emailstatus")
    </div>
    <p>
        <a asp-action="Create">Create a New Task</a>
    </p>
     
        
<p>
    @using (Html.BeginForm("Index", "tasklist", FormMethod.Post))
    {
        
       <text>Filter By Owner: </text> @Html.DropDownList("owner", ownerlist, "Show All")<br />
       <text>Filter By Priority: </text> @Html.DropDownList("prioity", priorities, "Show All")<br />
       <text>Filter By Status: </text> @Html.DropDownList("status", statuslist, "Show All") <br />
       <text>HIde Closed Tasks: </text> @Html.CheckBox("closedcheck",true) <br />
        
       <input type="submit" value="Search" />
    }
 

  
    

        @Html.ActionLink("Reset Filters", "Index")

   
</p>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.task)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.actionitem)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.status)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.owner)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.priority)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.comments)
                </th>
                @if (this.User.IsInRole("Administrator"))
                {
                    <th>
                        @Html.DisplayNameFor(model => model.workcodes.workcode)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.hours)
                    </th>

                }
                <th>
                    @Html.DisplayNameFor(model => model.desiredcompdate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.completedate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.updateddate)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td style="width: 14em">
                        @Html.DisplayFor(modelItem => item.task)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.actionitem)
                    </td>
                    <td style="width: 11em">
                        @Html.DisplayFor(modelItem => item.statuses.statusname)
                    </td>
                    <td style="width: 10em">
                        @Html.DisplayFor(modelItem => item.owners.ownername)
                    </td>
                    <td style="width: 6em">
                        @Html.DisplayFor(modelItem => item.prioritites.priorityname)
                    </td>
                    <td style="width: 15em">
                        @Html.DisplayFor(modelItem => item.comments)
                    </td>
@if (this.User.IsInRole("Administrator"))
{
                    <td style="width: 8em">
                        @Html.DisplayFor(modelItem => item.workcodes.workcode)
                    </td>
                    <td style="width: 8em">
                        @Html.DisplayFor(modelItem => item.hours)
                    </td>
}
                    <td style="width: 13em">
                        @Html.DisplayFor(modelItem => item.desiredcompdate)
                    </td>
                    <td style="width: 10em">
                        @Html.DisplayFor(modelItem => item.completedate)
                    </td>
                    <td style="width: 10em">
                        @Html.DisplayFor(modelItem => item.updateddate)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.id">Edit</a> 
                        <a asp-action="Delete" asp-route-id="@item.id">Delete</a>
                        <a asp-action="Details" asp-route-id="@item.id" >Details</a>
                        <a asp-action="ModalStatusUpdate" asp-controller="tasklist" asp-route-id="@item.id" data-target="#modal-container" data-toggle="modal">Update Status</a>

</td>
                </tr>
            }
        </tbody>
    </table>

@* The normal bootstrap modal with out any content in the modal-content div. Note that the id matches the data_target from the link*@
<div id="modal-container" class="modal fade hidden-print" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
        </div>
    </div>
</div>
@section scripts {
    @* The normal bootstrap behavior is to only grab the content for the modal once, if you need to pull in different partial views then the data on the modal will have to be cleared.*@
    <script type="text/javascript">
        $(function () {

            // boostrap 4 load modal example from docs
            $('#modal-container').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget); // Button that triggered the modal
                var url = button.attr("href");
                var modal = $(this);

                // note that this will replace the content of modal-content ever time the modal is opened
                modal.find('.modal-content').load(url);
            });
        });
    </script>
}
